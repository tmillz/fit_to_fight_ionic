/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from 'ionic-angular/components/datetime/datetime';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/util/form';
import * as import9 from 'ionic-angular/config/config';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from 'ionic-angular/components/item/item';
import * as import12 from 'ionic-angular/components/picker/picker';
import * as import13 from '@angular/forms/src/directives/control_value_accessor';
import * as import14 from '@angular/core/src/metadata/view';
import * as import15 from '@angular/core/src/linker/component_factory';
import * as import16 from '../button/button.ngfactory';
import * as import17 from 'ionic-angular/components/button/button';
export var Wrapper_DateTime = (function () {
    function Wrapper_DateTime(p0, p1, p2, p3, p4, p5) {
        this.changed = false;
        this._min = import1.UNINITIALIZED;
        this._max = import1.UNINITIALIZED;
        this._displayFormat = import1.UNINITIALIZED;
        this._pickerFormat = import1.UNINITIALIZED;
        this._cancelText = import1.UNINITIALIZED;
        this._doneText = import1.UNINITIALIZED;
        this._yearValues = import1.UNINITIALIZED;
        this._monthValues = import1.UNINITIALIZED;
        this._dayValues = import1.UNINITIALIZED;
        this._hourValues = import1.UNINITIALIZED;
        this._minuteValues = import1.UNINITIALIZED;
        this._monthNames = import1.UNINITIALIZED;
        this._monthShortNames = import1.UNINITIALIZED;
        this._dayNames = import1.UNINITIALIZED;
        this._dayShortNames = import1.UNINITIALIZED;
        this._pickerOptions = import1.UNINITIALIZED;
        this._mode = import1.UNINITIALIZED;
        this._disabled = import1.UNINITIALIZED;
        this.context = new import0.DateTime(p0, p1, p2, p3, p4, p5);
    }
    Wrapper_DateTime.prototype.check_min = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._min, currValue))) {
            this.changed = true;
            this.context.min = currValue;
            this._min = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_max = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._max, currValue))) {
            this.changed = true;
            this.context.max = currValue;
            this._max = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_displayFormat = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._displayFormat, currValue))) {
            this.changed = true;
            this.context.displayFormat = currValue;
            this._displayFormat = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_pickerFormat = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._pickerFormat, currValue))) {
            this.changed = true;
            this.context.pickerFormat = currValue;
            this._pickerFormat = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_cancelText = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._cancelText, currValue))) {
            this.changed = true;
            this.context.cancelText = currValue;
            this._cancelText = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_doneText = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._doneText, currValue))) {
            this.changed = true;
            this.context.doneText = currValue;
            this._doneText = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_yearValues = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._yearValues, currValue))) {
            this.changed = true;
            this.context.yearValues = currValue;
            this._yearValues = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_monthValues = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._monthValues, currValue))) {
            this.changed = true;
            this.context.monthValues = currValue;
            this._monthValues = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_dayValues = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._dayValues, currValue))) {
            this.changed = true;
            this.context.dayValues = currValue;
            this._dayValues = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_hourValues = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._hourValues, currValue))) {
            this.changed = true;
            this.context.hourValues = currValue;
            this._hourValues = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_minuteValues = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._minuteValues, currValue))) {
            this.changed = true;
            this.context.minuteValues = currValue;
            this._minuteValues = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_monthNames = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._monthNames, currValue))) {
            this.changed = true;
            this.context.monthNames = currValue;
            this._monthNames = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_monthShortNames = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._monthShortNames, currValue))) {
            this.changed = true;
            this.context.monthShortNames = currValue;
            this._monthShortNames = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_dayNames = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._dayNames, currValue))) {
            this.changed = true;
            this.context.dayNames = currValue;
            this._dayNames = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_dayShortNames = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._dayShortNames, currValue))) {
            this.changed = true;
            this.context.dayShortNames = currValue;
            this._dayShortNames = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_pickerOptions = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._pickerOptions, currValue))) {
            this.changed = true;
            this.context.pickerOptions = currValue;
            this._pickerOptions = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_mode = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._mode, currValue))) {
            this.changed = true;
            this.context.mode = currValue;
            this._mode = currValue;
        }
    };
    Wrapper_DateTime.prototype.check_disabled = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._disabled, currValue))) {
            this.changed = true;
            this.context.disabled = currValue;
            this._disabled = currValue;
        }
    };
    Wrapper_DateTime.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        return changed;
    };
    return Wrapper_DateTime;
}());
var renderType_DateTime_Host = null;
var _View_DateTime_Host0 = (function (_super) {
    __extends(_View_DateTime_Host0, _super);
    function _View_DateTime_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_DateTime_Host0, renderType_DateTime_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    Object.defineProperty(_View_DateTime_Host0.prototype, "_NG_VALUE_ACCESSOR_0_5", {
        get: function () {
            if ((this.__NG_VALUE_ACCESSOR_0_5 == null)) {
                (this.__NG_VALUE_ACCESSOR_0_5 = [this._DateTime_0_4.context]);
            }
            return this.__NG_VALUE_ACCESSOR_0_5;
        },
        enumerable: true,
        configurable: true
    });
    _View_DateTime_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('ion-datetime', rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_DateTime0(this.viewUtils, this.injector(0), this._appEl_0);
        this._DateTime_0_4 = new Wrapper_DateTime(this.parentInjector.get(import8.Form), this.parentInjector.get(import9.Config), new import10.ElementRef(this._el_0), this.renderer, this.parentInjector.get(import11.Item, null), this.parentInjector.get(import12.PickerController, null));
        this._appEl_0.initComponent(this._DateTime_0_4.context, [], compView_0);
        compView_0.create(this._DateTime_0_4.context, this.projectableNodes, null);
        var disposable_0 = this.renderer.listen(this._el_0, 'click', this.eventHandler(this._handle_click_0_0.bind(this)));
        var disposable_1 = this.renderer.listen(this._el_0, 'keyup.space', this.eventHandler(this._handle_keyup_space_0_1.bind(this)));
        this._expr_2 = import1.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [
            disposable_0,
            disposable_1
        ], []);
        return this._appEl_0;
    };
    _View_DateTime_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.DateTime) && (0 === requestNodeIndex))) {
            return this._DateTime_0_4.context;
        }
        if (((token === import13.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_0_5;
        }
        return notFoundResult;
    };
    _View_DateTime_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._DateTime_0_4.detectChangesInternal(this, this._el_0, throwOnChange);
        this.detectContentChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._DateTime_0_4.context.ngAfterContentInit();
            }
        }
        var currVal_2 = this._DateTime_0_4.context._disabled;
        if (import2.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementClass(this._el_0, 'datetime-disabled', currVal_2);
            this._expr_2 = currVal_2;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_DateTime_Host0.prototype.destroyInternal = function () {
        this._DateTime_0_4.context.ngOnDestroy();
    };
    _View_DateTime_Host0.prototype._handle_click_0_0 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._DateTime_0_4.context._click($event) !== false);
        return (true && pd_0);
    };
    _View_DateTime_Host0.prototype._handle_keyup_space_0_1 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._DateTime_0_4.context._keyup() !== false);
        return (true && pd_0);
    };
    return _View_DateTime_Host0;
}(import3.AppView));
function viewFactory_DateTime_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_DateTime_Host === null)) {
        (renderType_DateTime_Host = viewUtils.createRenderComponentType('', 0, import14.ViewEncapsulation.None, [], {}));
    }
    return new _View_DateTime_Host0(viewUtils, parentInjector, declarationEl);
}
export var DateTimeNgFactory = new import15.ComponentFactory('ion-datetime', viewFactory_DateTime_Host0, import0.DateTime);
var styles_DateTime = [];
var renderType_DateTime = null;
var _View_DateTime0 = (function (_super) {
    __extends(_View_DateTime0, _super);
    function _View_DateTime0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_DateTime0, renderType_DateTime, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_DateTime0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'datetime-text');
        this._text_1 = this.renderer.createText(this._el_0, '', null);
        this._el_2 = this.renderer.createElement(parentRenderNode, 'button', null);
        this.renderer.setElementAttribute(this._el_2, 'aria-haspopup', 'true');
        this.renderer.setElementAttribute(this._el_2, 'class', 'item-cover');
        this.renderer.setElementAttribute(this._el_2, 'ion-button', 'item-cover');
        this.renderer.setElementAttribute(this._el_2, 'type', 'button');
        this._appEl_2 = new import5.AppElement(2, null, this, this._el_2);
        var compView_2 = import16.viewFactory_Button0(this.viewUtils, this.injector(2), this._appEl_2);
        this._Button_2_4 = new import16.Wrapper_Button(null, 'item-cover', this.parentInjector.get(import9.Config), new import10.ElementRef(this._el_2), this.renderer);
        this._appEl_2.initComponent(this._Button_2_4.context, [], compView_2);
        compView_2.create(this._Button_2_4.context, [[]], null);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this.init([], [
            this._el_0,
            this._text_1,
            this._el_2
        ], [], []);
        return null;
    };
    _View_DateTime0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.Button) && (2 === requestNodeIndex))) {
            return this._Button_2_4.context;
        }
        return notFoundResult;
    };
    _View_DateTime0.prototype.detectChangesInternal = function (throwOnChange) {
        if (this._Button_2_4.detectChangesInternal(this, this._el_2, throwOnChange)) {
            this._appEl_2.componentView.markAsCheckOnce();
        }
        this.detectContentChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._Button_2_4.context.ngAfterContentInit();
            }
        }
        var currVal_0 = import2.interpolate(1, '', this.context._text, '');
        if (import2.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setText(this._text_1, currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_1 = this.context.id;
        if (import2.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementProperty(this._el_2, 'id', currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = this.context._labelId;
        if (import2.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementAttribute(this._el_2, 'aria-labelledby', ((currVal_2 == null) ? null : currVal_2.toString()));
            this._expr_2 = currVal_2;
        }
        var currVal_3 = this.context._disabled;
        if (import2.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setElementAttribute(this._el_2, 'aria-disabled', ((currVal_3 == null) ? null : currVal_3.toString()));
            this._expr_3 = currVal_3;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_DateTime0;
}(import3.AppView));
export function viewFactory_DateTime0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_DateTime === null)) {
        (renderType_DateTime = viewUtils.createRenderComponentType('', 0, import14.ViewEncapsulation.None, styles_DateTime, {}));
    }
    return new _View_DateTime0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=datetime.ngfactory.js.map